1、涉及的表
user, role, permission, router, interface...

2、关联关系
用户（user） - 角色（role）：多对多的关系，一个用户可以对应多个角色，多个角色同时生效（不存在默认/激活角色）
    关联字段：userId 和 roleId
角色（role） - 权限（permission）：多对多的关系，一个角色对应多个权限
    关联字段：roleId 和 permissionId
权限（permission） - 路由（router）：一对一的关系，一个按钮级别的权限对应一个路由
    关联字段：权限编码
路由（router） - 接口（interface）：一对多的关系，一个路由可能对应多个请求地址（一般是一个）
    关联字段：权限编码

3、特殊规则
a: 路由纳管规则，如果路由在权限表中有记录，则被纳管，否则未纳管
b: 路由访问级别，纳管的路由，已 permission 为准，未纳管的路由，以 router 为准
    OPEN（一级）: 接口可直接访问（不需要登录即可访问）
    PUBLIC（二级）: 判断用户是否认证，未认证则提示用户需要登录（登录后就可以访问的接口，不需要权限）
    PERM（三级）: 获取用户对应的权限列表，如果包含该权限则允许访问，否则抛出异常，提示用户没有权限（需要拥有对应的权限才可以访问）

4、注意事项
a: 暂不支持不建议使用PathVariable开发，如果有需要，需要定制代码
b: 接口需要使用@Router注解才可生效，否则该接口不允许访问
c: 如果涉及新增接口，尽量保证接口为/api/xxx，可参考本框架的接口写法，否则需要修改上线部署的 Nginx 配置（重要！！）
d: 在本地允许的模式下，如果在项目运行中，修改了 router 的接口默认访问级别（高级别修改为低级别），
   重启项目后，接口可能会存在最多五分钟的刷新时间，可以通过清理 interfaceLevel 缓存来解决（不想清理也可以，最多五分钟，接口会自动刷新）
